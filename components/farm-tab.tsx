"use client"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { ChevronDown, ChevronUp, RotateCcw, Settings, Plus, Minus } from "lucide-react"
import { UserStorage } from "@/utils/user-storage"
import { getUserGameData, saveUserGameData } from "@/utils/game-storage"

interface Activity {
  name: string
  icon: string
  maxCount: number
  currentCount: number
  baseBP: number
  isCompleted: boolean
  description: string
}

// –í–µ—Ä—Å–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
const DATA_VERSION = 2

// –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
const DEFAULT_ACTIVITIES: Activity[] = [
  {
    name: "–õ–æ—Ç–µ—Ä–µ—è",
    icon: "üé∞",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–ö—É–ø–∏—Ç—å –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç. –î–æ—Å—Ç—É–ø–Ω–æ —Å 10:00 –¥–æ 23:50",
  },
  {
    name: "–¢–∏—Ä",
    icon: "üéØ",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ç–∏—Ä–µ (>75% –ø–æ–ø–∞–¥–∞–Ω–∏–π –ø–æ —Ü–µ–ª—è–º)",
  },
  {
    name: "–ö–∏–Ω–æ—Å—Ç—É–¥–∏—è",
    icon: "üé¨",
    maxCount: 0,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–°–Ω—è—Ç—å –∫–∏–Ω–æ—Å—Ç—É–¥–∏—é. –¶–µ–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Å –ø–ª–∞—Ç–∏–Ω–æ–≤–æ–π –≤–∏–ø - 2500$",
  },
  {
    name: "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
    icon: "üçø",
    maxCount: 5,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "5 —Ä–∞–∑ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ",
  },
  {
    name: "–ì–æ–Ω–∫–∞",
    icon: "üèÅ",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–ü–æ—É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–Ω–∫–µ —Å–æ —Å—Ç–∞–≤–∫–æ–π >1000$",
  },
  {
    name: "–ê—Ä–µ–Ω–∞",
    icon: "üèüÔ∏è",
    maxCount: 3,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "3 —Ä–∞–∑–∞ –ø–æ–±–µ–¥–∏—Ç—å –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ —Å–æ —Å—Ç–∞–≤–∫–æ–π >100$",
  },
  {
    name: "–°—Ç—Ä–æ–π–∫–∞",
    icon: "üèóÔ∏è",
    maxCount: 25,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–°–æ–≤–µ—Ä—à–∏—Ç—å 25 –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ",
  },
  {
    name: "–ü–æ—Ä—Ç",
    icon: "üö¢",
    maxCount: 25,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–°–æ–≤–µ—Ä—à–∏—Ç—å 25 –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø–æ—Ä—Ç—É",
  },
  {
    name: "–®–∞—Ö—Ç–∞",
    icon: "‚õèÔ∏è",
    maxCount: 25,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–°–æ–≤–µ—Ä—à–∏—Ç—å 25 –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —à–∞—Ö—Ç–µ",
  },
  {
    name: "–§–µ—Ä–º–∞",
    icon: "üöú",
    maxCount: 10,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–°–æ–≤–µ—Ä—à–∏—Ç—å 10 –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Ñ–µ—Ä–º–µ",
  },
  {
    name: "–ö–∞—Ä—Ç–∏–Ω–≥",
    icon: "üèéÔ∏è",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–í—ã–∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–≥–µ. –í—Ö–æ–¥ - 500$",
  },
  {
    name: "–°–æ–∫—Ä–æ–≤–∏—â–µ",
    icon: "üíé",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–ù–∞–π—Ç–∏ —Å–æ–∫—Ä–æ–≤–∏—â–µ (–Ω–µ —Ö–ª–∞–º/—Å–µ–º–µ–Ω–∞) —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–∞–ª–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ –ª–æ–ø–∞—Ç—ã",
  },
  {
    name: "–ê–≤—Ç–æ–±—É—Å",
    icon: "üöå",
    maxCount: 2,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–ü—Ä–æ–µ—Ö–∞—Ç—å 2 –ª—é–±—ã—Ö —Ä–µ–π—Å–∞ —Ä–∞–±–æ—Ç–∞—è –≤–æ–¥–∏—Ç–µ–ª–µ–º –∞–≤—Ç–æ–±—É—Å–∞",
  },
  {
    name: "–ü–æ—á—Ç–∞",
    icon: "‚úâÔ∏è",
    maxCount: 10,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–û—Ç–≤–µ–∑—Ç–∏ 10 –ø–æ—Å—ã–ª–æ–∫ —Å –ø–æ—á—Ç—ã. –ö/–î –Ω–∞ –≤–∑—è—Ç–∏–µ –ø–æ—Å—ã–ª–∫–∏ - 10 –º–∏–Ω. –†–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å 7 —É—Ä–æ–≤–Ω—è",
  },
  {
    name: "–ù—É–ª–∏ –≤ –∫–∞–∑–∏–Ω–æ",
    icon: "üé≤",
    maxCount: 0,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–í—ã–∏–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É –ø–æ—Å—Ç–∞–≤–∏–≤ –Ω–∞ 0 –∏–ª–∏ 00",
  },
  {
    name: "–î–µ–Ω—Å –±–∞—Ç–ª",
    icon: "üï∫",
    maxCount: 3,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "3 —Ä–∞–∑–∞ –≤—ã–∏–≥—Ä–∞—Ç—å –≤ –¥—ç–Ω—Å –±–∞—Ç–ª–µ. –ù–æ—á–Ω–æ–π –∫–ª—É–± –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç",
  },
  {
    name: "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª",
    icon: "üèãÔ∏è",
    maxCount: 20,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–°–æ–≤–µ—Ä—à–∏—Ç—å 20 –ø–æ–¥—Ö–æ–¥–æ–≤ –Ω–∞ –ª—é–±–æ–º —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ –≤ –ª—é–±–æ–º —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω–æ–º –∑–∞–ª–µ",
  },
  {
    name: "–¢—Ä–µ–Ω–µ—Ä. –∫–æ–º–ø–ª–µ–∫—Å",
    icon: "üí™",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "5 —Ä–∞–∑ –ø–æ–±–µ–¥–∏—Ç—å –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ —Å–æ —Å—Ç–∞–≤–∫–æ–π >100$",
  },
  {
    name: "–û—Ö–æ—Ç–∞",
    icon: "ü¶å",
    maxCount: 5,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–†–∞–∑–¥–µ–ª–∞—Ç—å 5 —à–∫—É—Ä –ª—é–±—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö (100% –ø—Ä–æ—á–Ω–æ—Å—Ç–∏)",
  },
  {
    name: "–ü–æ–∂–∞—Ä–Ω—ã–π",
    icon: "üöí",
    maxCount: 25,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–ü–æ—Ç—É—à–∏—Ç—å 25 –æ–≥–æ–Ω—å–∫–æ–≤. –†–∞–±–æ—Ç–∞ –ø–æ–∂–∞—Ä–Ω—ã–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Å –Ω–∞–ª–∏—á–∏–µ–º –≤–æ–µ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ —Å 10 —É—Ä–æ–≤–Ω—è",
  },
  {
    name: "–î–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫",
    icon: "üöö",
    maxCount: 15,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description:
      "15 —Ä–∞–∑ –ø—Ä–∏–≤–µ–∑—Ç–∏ –≥—Ä—É–∑ –≤ –ø–æ—Ä—Ç. –†–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å 7 —É—Ä–æ–≤–Ω—è —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º",
  },
  {
    name: "–ó–∞–∫–∞–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
    icon: "üì¶",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description:
      "–û—Ç–∫–ª—é—á–∏—Ç—å –∏ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–∫–∞–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–∏–∑–Ω–µ—Å–∞",
  },
  {
    name: "–°–º–µ–Ω–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏",
    icon: "üíá",
    maxCount: 2,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "2 —Ä–∞–∑–∞ —Å–º–µ–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–æ—Å—Ç—å —É —Ö–∏—Ä—É—Ä–≥–∞ –≤ EMS",
  },
  {
    name: "–ì—Ä–∞—Ñ—Ñ–∏—Ç–∏",
    icon: "üé®",
    maxCount: 7,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–ó–∞–∫—Ä–∞—Å–∏—Ç—å 7 –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ (–±–∞–Ω–¥–∞)",
  },
  {
    name: "–ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞",
    icon: "üíº",
    maxCount: 5,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–°–¥–∞—Ç—å 5 –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥—ã (–º–∞—Ñ–∏—è)",
  },
  {
    name: "–ë–∏–∑–≤–∞—Ä",
    icon: "üî´",
    maxCount: 5,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–£—á–∞—Å—Ç–∏–µ –≤ –±–∏–∑–≤–∞—Ä–µ (–º–∞—Ñ–∏—è)",
  },
  {
    name: "–ö–∞–ø—Ç",
    icon: "üë•",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–£—á–∞—Å—Ç–∏–µ –≤ –∫–∞–ø—Ç–µ (–±–∞–Ω–¥–∞)",
  },
  {
    name: "–•–∞–º–º–µ—Ä —Å –í–ó–•",
    icon: "üöó",
    maxCount: 0,
    currentCount: 0,
    baseBP: 3,
    isCompleted: false,
    description: "–ü—Ä–∏–≥–Ω–∞—Ç—å —Ö–∞–º–º–µ—Ä –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω —Å–≤–æ–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–∞ –≤–æ–π–Ω–µ –∑–∞ —Ö–∞–º–º–µ—Ä—ã (–∫—Ä–∞–π–º —Ñ—Ä–∞–∫—Ü–∏–∏)",
  },
  {
    name: "–ú–µ–¥–∫–∞—Ä—Ç—ã –≤ EMS",
    icon: "üè•",
    maxCount: 5,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–í—ã–¥–∞—Ç—å 5 –º–µ–¥–∫–∞—Ä—Ç EMS",
  },
  {
    name: "–í—ã–∑–æ–≤—ã –≤ EMS",
    icon: "üöë",
    maxCount: 15,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–ó–∞–∫—Ä—ã—Ç—å 15 –≤—ã–∑–æ–≤–æ–≤ EMS",
  },
  {
    name: "–ó–µ–ª—ë–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ WN",
    icon: "üìÑ",
    maxCount: 0,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–°–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–µ–ª—ë–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (WN)",
  },
  {
    name: "–û–±—ä—è–≤–ª–µ–Ω–∏—è WN",
    icon: "üì∞",
    maxCount: 40,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å 40 –æ–±—ä—è–≤–ª–µ–Ω–∏–π (WN)",
  },
  {
    name: "–û–≥—Ä–∞–±–ª–µ–Ω–∏—è –¥–æ–º–æ–≤",
    icon: "üè†",
    maxCount: 15,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–í–∑–ª–æ–º–∞—Ç—å 15 –∑–∞–º–∫–æ–≤ –Ω–∞ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è—Ö –¥–æ–º–æ–≤ –∏–ª–∏ —É–≥–æ–Ω–∞—Ö –∞–≤—Ç–æ (–±–∞–Ω–¥—ã)",
  },
  {
    name: "–ö–æ–¥—ã",
    icon: "üî¢",
    maxCount: 5,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–ó–∞–∫—Ä—ã—Ç—å 5 –∫–æ–¥–æ–≤ (–°–∏–ª–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)",
  },
  {
    name: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ",
    icon: "üöó",
    maxCount: 2,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —É—á—ë—Ç 2 –∞–≤—Ç–æ–º–æ–±–∏–ª—è (LSPD)",
  },
  {
    name: "–ê—Ä–µ—Å—Ç",
    icon: "üëÆ",
    maxCount: 0,
    currentCount: 0,
    baseBP: 1,
    isCompleted: false,
    description: "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ 1 –∞—Ä–µ—Å—Ç –≤ –ö–ü–ó (LSSD, LSPD)",
  },
  {
    name: "–í—ã–∫—É–ø —Å –ö–ü–ó",
    icon: "üîì",
    maxCount: 2,
    currentCount: 0,
    baseBP: 2,
    isCompleted: false,
    description: "–í—ã–∫—É–ø–∏—Ç—å 2 —á–µ–ª–æ–≤–µ–∫ –∏–∑ –ö–ü–ó (–ê–¥–≤–æ–∫–∞—Ç)",
  },
]

export function FarmTab() {
  const [totalBP, setTotalBP] = useState(0)
  const [isVIP, setIsVIP] = useState(false)
  const [isX2, setIsX2] = useState(false)
  const [expandedActivity, setExpandedActivity] = useState<number | null>(null)
  const [counterValue, setCounterValue] = useState(0)
  const [activities, setActivities] = useState<Activity[]>(DEFAULT_ACTIVITIES)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏ÔøΩÔøΩ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  const migrateActivities = (savedActivities: Activity[]): Activity[] => {
    const migratedActivities = DEFAULT_ACTIVITIES.map((defaultActivity) => {
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const savedActivity = savedActivities.find((saved) => saved.name === defaultActivity.name)

      if (savedActivity) {
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
          ...defaultActivity, // –ë–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          currentCount: savedActivity.currentCount || 0,
          isCompleted: savedActivity.isCompleted || false,
        }
      } else {
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–æ–≤–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return defaultActivity
      }
    })

    return migratedActivities
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞—Ä–º–∞
  const saveCurrentFarmData = async (
    currentTotalBP: number,
    currentIsVIP: boolean,
    currentIsX2: boolean,
    currentActivities: Activity[],
    currentCounterValue: number,
  ) => {
    const userId = UserStorage.getUserId()
    const initData = UserStorage.getTelegramInitData()
    if (userId && initData) {
      const dataToSave = {
        version: DATA_VERSION,
        totalBP: currentTotalBP,
        isVIP: currentIsVIP,
        isX2: currentIsX2,
        activities: currentActivities,
        counterValue: currentCounterValue,
      }
      const currentFullData = (await getUserGameData(userId, initData)) || {}
      await saveUserGameData(userId, { ...currentFullData, farmData: dataToSave }, initData)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadFarmData = async () => {
      const userId = UserStorage.getUserId()
      const initData = UserStorage.getTelegramInitData()
      if (userId && initData) {
        const savedData = await getUserGameData(userId, initData)
        if (savedData && savedData.farmData) {
          setTotalBP(savedData.farmData.totalBP || 0)
          setIsVIP(savedData.farmData.isVIP || false)
          setIsX2(savedData.farmData.isX2 || false)
          setCounterValue(savedData.farmData.counterValue || 0)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
          if (savedData.farmData.activities) {
            if (!savedData.farmData.version || savedData.farmData.version < DATA_VERSION) {
              // –ù—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è
              const migratedActivities = migrateActivities(savedData.farmData.activities)
              setActivities(migratedActivities)
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              saveCurrentFarmData(
                savedData.farmData.totalBP || 0,
                savedData.farmData.isVIP || false,
                savedData.farmData.isX2 || false,
                migratedActivities,
                savedData.farmData.counterValue || 0,
              )
            } else {
              // –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
              const migratedActivities = migrateActivities(savedData.farmData.activities)
              setActivities(migratedActivities)
            }
          }
        }
      }
    }
    loadFarmData()
  }, [])

  const getMultiplier = () => {
    let multiplier = 1
    if (isVIP) multiplier *= 2
    if (isX2) multiplier *= 2
    return multiplier
  }

  const updateMultiplier = (type: "vip" | "x2") => {
    const oldMultiplier = getMultiplier()
    let newIsVIP = isVIP
    let newIsX2 = isX2

    if (type === "vip") {
      newIsVIP = !isVIP
      setIsVIP(newIsVIP)
    } else {
      newIsX2 = !isX2
      setIsX2(newIsX2)
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º totalBP —Å –Ω–æ–≤—ã–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
    setTimeout(() => {
      const newMultiplier =
        type === "vip"
          ? newIsVIP
            ? oldMultiplier * 2
            : oldMultiplier / 2
          : newIsX2
            ? oldMultiplier * 2
            : oldMultiplier / 2

      const updatedTotalBP = Math.floor((totalBP * newMultiplier) / oldMultiplier)
      setTotalBP(updatedTotalBP)
      saveCurrentFarmData(updatedTotalBP, newIsVIP, newIsX2, activities, counterValue)
    }, 0)
  }

  const increaseCount = (index: number) => {
    setActivities((prev) => {
      const newActivities = prev.map((activity, i) => {
        if (i === index && activity.currentCount < activity.maxCount && !activity.isCompleted) {
          const newCount = activity.currentCount + 1
          const updatedActivity = { ...activity, currentCount: newCount }

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º—É–º–∞
          if (newCount === activity.maxCount && activity.maxCount > 0) {
            const finalBP = activity.baseBP * getMultiplier()
            setTotalBP((prevBP) => {
              const updatedBP = prevBP + finalBP
              saveCurrentFarmData(updatedBP, isVIP, isX2, newActivities, counterValue)
              return updatedBP
            })
            updatedActivity.isCompleted = true
          }
          return updatedActivity
        }
        return activity
      })
      saveCurrentFarmData(totalBP, isVIP, isX2, newActivities, counterValue)
      return newActivities
    })
  }

  const decreaseCount = (index: number) => {
    setActivities((prev) => {
      const newActivities = prev.map((activity, i) => {
        if (i === index && activity.currentCount > 0 && !activity.isCompleted) {
          return { ...activity, currentCount: activity.currentCount - 1 }
        }
        return activity
      })
      saveCurrentFarmData(totalBP, isVIP, isX2, newActivities, counterValue)
      return newActivities
    })
  }

  const completeTaskWithoutLimit = (index: number) => {
    setActivities((prev) => {
      const newActivities = prev.map((activity, i) => {
        if (i === index && !activity.isCompleted && activity.maxCount === 0) {
          const finalBP = activity.baseBP * getMultiplier()
          setTotalBP((prevBP) => {
            const updatedBP = prevBP + finalBP
            saveCurrentFarmData(updatedBP, isVIP, isX2, newActivities, counterValue)
            return updatedBP
          })
          return { ...activity, isCompleted: true }
        }
        return activity
      })
      saveCurrentFarmData(totalBP, isVIP, isX2, newActivities, counterValue)
      return newActivities
    })
  }

  const updateCounter = (increment: boolean) => {
    const newValue = increment ? counterValue + 1 : Math.max(0, counterValue - 1)
    setCounterValue(newValue)

    // –í—ã—á–∏—Å–ª—è–µ–º BP: –∑–∞ –∫–∞–∂–¥—ã–µ 3 –µ–¥–∏–Ω–∏—Ü—ã —Å—á—ë—Ç—á–∏–∫–∞ –¥–∞—ë–º +2 BP
    const bpFromCounter = Math.floor(newValue / 3) * 2 * getMultiplier()
    const oldBpFromCounter = Math.floor(counterValue / 3) * 2 * getMultiplier()
    const bpDifference = bpFromCounter - oldBpFromCounter

    if (bpDifference !== 0) {
      setTotalBP((prevBP) => {
        const updatedBP = prevBP + bpDifference
        saveCurrentFarmData(updatedBP, isVIP, isX2, activities, newValue)
        return updatedBP
      })
    } else {
      saveCurrentFarmData(totalBP, isVIP, isX2, activities, newValue)
    }
  }

  const resetProgress = async () => {
    setTotalBP(0)
    setCounterValue(0)
    const resetActivities = activities.map((activity) => ({ ...activity, currentCount: 0, isCompleted: false }))
    setActivities(resetActivities)
    saveCurrentFarmData(0, false, false, resetActivities, 0)
  }

  const toggleActivityExpansion = (index: number) => {
    setExpandedActivity(expandedActivity === index ? null : index)
  }

  return (
    <div className="p-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <span className="text-orange-500">üòä</span>
          <h1 className="text-lg font-semibold">–§–∞—Ä–º</h1>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-400">–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ñ–∞—Ä–º–∞</span>
          <span className="text-yellow-500">üí∞</span>
          <Button variant="ghost" size="icon">
            <Settings className="w-4 h-4" />
          </Button>
        </div>
      </div>

      <div className="mb-4 p-3 bg-gray-800 rounded-lg">
        <div className="flex items-center gap-2 mb-2">
          <span className="text-orange-500">üòä</span>
          <span className="text-sm transition-all duration-200 ease-out">–ü–æ–ª—É—á–µ–Ω–æ: {totalBP} BP</span>
        </div>
        <div className="flex justify-between items-center">
          <div className="flex gap-2">
            <Button
              size="sm"
              variant={isX2 ? "default" : "outline"}
              onClick={() => updateMultiplier("x2")}
              className={isX2 ? "bg-orange-600 transition-colors" : "transition-colors"}
            >
              X2 –°–µ—Ä–≤–µ—Ä
            </Button>
            <Button
              size="sm"
              variant={isVIP ? "default" : "outline"}
              onClick={() => updateMultiplier("vip")}
              className={isVIP ? "bg-yellow-600 transition-colors" : "transition-colors"}
            >
              VIP GoldPlat
            </Button>
          </div>
          <span className="text-sm text-gray-400">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{getMultiplier()}</span>
        </div>
      </div>

      {/* –°—á—ë—Ç—á–∏–∫ */}
      <Card className="bg-gray-800 border-gray-700 p-4 mb-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <span className="text-lg">üî¢</span>
            <div>
              <span className="text-sm font-semibold">–°—á—ë—Ç—á–∏–∫</span>
              <p className="text-xs text-gray-400">–ó–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ = +2 BP</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 transition-colors"
              onClick={() => updateCounter(false)}
              disabled={counterValue === 0}
            >
              <Minus className="w-4 h-4" />
            </Button>
            <span className="text-lg font-semibold w-12 text-center">{counterValue}</span>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 transition-colors"
              onClick={() => updateCounter(true)}
            >
              <Plus className="w-4 h-4" />
            </Button>
            <div className="ml-2 text-center">
              <span className="text-xs text-gray-400">+{Math.floor(counterValue / 3) * 2 * getMultiplier()} BP</span>
            </div>
          </div>
        </div>
      </Card>

      <div className="space-y-2">
        {activities.map((activity, index) => {
          const finalBP = activity.baseBP * getMultiplier()

          return (
            <div key={index}>
              <Card
                className={`border-gray-700 p-3 cursor-pointer hover:bg-gray-700 transition-colors hover:scale-[1.01] duration-200 ease-out ${
                  activity.isCompleted ? "bg-green-900/20 border-green-700" : "bg-gray-800"
                }`}
                onClick={() => toggleActivityExpansion(index)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <span className="text-lg flex-shrink-0">{activity.icon}</span>
                    <div className="min-w-0 flex-1">
                      <span className="text-sm break-words">{activity.name}</span>
                      {activity.isCompleted && <span className="text-green-500 text-xs ml-2">‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>}
                    </div>
                  </div>
                  <div className="flex items-center gap-2 flex-shrink-0">
                    {activity.maxCount > 0 ? (
                      <>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6 transition-colors"
                          onClick={(e) => {
                            e.stopPropagation()
                            decreaseCount(index)
                          }}
                          disabled={activity.currentCount === 0 || activity.isCompleted}
                        >
                          <ChevronDown className="w-3 h-3" />
                        </Button>
                        <span className="text-sm w-6 text-center text-orange-500">{activity.maxCount}</span>
                        <span className="text-sm w-6 text-center">{activity.currentCount}</span>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6 transition-colors"
                          onClick={(e) => {
                            e.stopPropagation()
                            increaseCount(index)
                          }}
                          disabled={activity.currentCount >= activity.maxCount || activity.isCompleted}
                        >
                          <ChevronUp className="w-3 h-3" />
                        </Button>
                        <div className="w-12 text-center">
                          {activity.isCompleted ? (
                            <span className="text-green-500 text-xs">‚úì</span>
                          ) : (
                            <span className="text-xs text-gray-400">+{finalBP}</span>
                          )}
                        </div>
                      </>
                    ) : (
                      <Button
                        size="sm"
                        disabled={activity.isCompleted}
                        onClick={(e) => {
                          e.stopPropagation()
                          completeTaskWithoutLimit(index)
                        }}
                        className={`text-xs w-12 ${
                          activity.isCompleted ? "bg-green-600" : "bg-orange-600 hover:bg-orange-700"
                        }`}
                      >
                        {activity.isCompleted ? "‚úì" : `+${finalBP}`}
                      </Button>
                    )}
                  </div>
                </div>
              </Card>

              {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ */}
              <div
                className={`overflow-hidden transition-all duration-300 ease-in-out ${
                  expandedActivity === index ? "max-h-32 opacity-100" : "max-h-0 opacity-0"
                }`}
              >
                <Card className="bg-gray-700 border-gray-600 p-3 mt-1 ml-4">
                  <p className="text-sm text-gray-300 break-words whitespace-pre-wrap leading-relaxed text-center">
                    {activity.description}
                  </p>
                  {activity.maxCount > 0 && (
                    <div className="mt-2 text-xs text-gray-400 text-center">
                      <div>–õ–∏–º–∏—Ç: {activity.maxCount}</div>
                    </div>
                  )}
                </Card>
              </div>
            </div>
          )
        })}
      </div>

      <div className="mt-6">
        <Button
          onClick={resetProgress}
          className="w-full bg-orange-600 hover:bg-orange-700 border border-orange-500 transition-colors"
        >
          <RotateCcw className="w-4 h-4 mr-2" />
          –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
        </Button>
      </div>

      <div className="mt-4 text-center">
        <span className="text-xs text-gray-500">ID: {UserStorage.getCurrentUserId().slice(-8)}</span>
      </div>
    </div>
  )
}
